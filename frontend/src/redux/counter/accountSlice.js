import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { useDispatch } from 'react-redux';

const initialState = {
  isAuthenticated: false,
  user: {
    email: "",
    name: "",
    phone: "",
    password: "",
    address: "",
    role: "",
    image_url: ""
  },
  
};

export const accountSlice = createSlice({
  name: "account",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    doLoginAction: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.isAuthenticated = true;
      state.user = action.payload.user;
    },
    doGetAccountAction: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.isAuthenticated = true;
      state.user = action.payload;
    },
    doLogOutAction: (state, action) => {
      state.isAuthenticated = false;
      state.user = initialState.user;
    },
    updateAvatar: (state, action) => {
      console.log(">>>payload: ", action.payload)
      state.user.image_url = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const { doLoginAction, doGetAccountAction, doLogOutAction, updateAvatar } = accountSlice.actions;

export default accountSlice.reducer;
