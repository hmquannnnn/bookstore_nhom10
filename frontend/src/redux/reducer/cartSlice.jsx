import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { useDispatch } from "react-redux";

const initialState = {
    total: 0,
    books: [],
};

const handleDuplicateBooks = (arr) => {
    const resultObj = {};
    arr.forEach((item) => {
        const { user_email, book_id, quantity_ordered } = item;
        if (resultObj[book_id]) {
            resultObj[book_id].quantity_ordered += quantity_ordered;
        } else {
            resultObj[book_id] = item;
        }
    })
    const new_arr = Object.values(resultObj);
    // console.log(new_arr, "and", resultObj);
    return new_arr;
}

export const cartSlice = createSlice({
    name: "cart", initialState, // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        deleteCart: (state, action) => {
            state.total = 0;
            state.books = initialState.books;
        },
        getCartAction: (state, action) => {
            // calc total
            const orderList = action.payload;
            let newTotal = 0;
            orderList.forEach((order) => {
                newTotal += order.quantity_ordered;
            })
            // console.log(">>>debug: ", action.payload),

            state.total = newTotal;
            state.books = handleDuplicateBooks(action.payload);
        },
        addBookIntoCartAction: (state, action) => {
            // console.log(">>>check now: ", action.payload);
            state.total += action.payload.count;
            // console.log(">>>check total redux: ", state.total);
        }
    }, // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
    },
});

export const { getCartAction, addBookIntoCartAction, deleteCart } = cartSlice.actions;

export default cartSlice.reducer;
